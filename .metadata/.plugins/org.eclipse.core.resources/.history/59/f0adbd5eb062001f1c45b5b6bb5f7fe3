package Exercises;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.Scanner;
import java.sql.*;

//This is the Interface that will help to create a required methods without forgetting
interface MovieDAO{ 
	void createTable(String tableName) throws Exception;
	void deleteTable(String tableName);
	void createMovie(final Movie movie, String tableName);
	void deleteMovie(int id, String tableName);
	void updateMoviesTitle(int id, String newTitle, String movieName);
	List<Movie> findAll(String tableName);
}





class MovieDAOImple implements MovieDAO{
	private final Connection co; 
	//Here we declaring the Connection variable co outside the methods to make it instance variable.
	//So this will have global scope.
	
	public MovieDAOImple(Connection co) { 
		//This is a parameterized constructor, this will take the object of the Connection from main method.
		this.co = co; 
	}
	
	
	//This method wil create a Movies table with predefined columns. 
	//And if the table is already exists, then it will not create table.
	public void createTable(String tableName) {
		try(Statement st = co.createStatement()) { // This is a try-with-resource. Here Statement object will created and when ever the cursor comes out of the try block, the statement resource will be closed.
			
			String query = "Create table if not exists "+tableName+ "(id Integer AUTO_INCREMENT,"
					+ "title Varchar(255),"
					+ "genre Varchar(255),"
					+ "yearOfRelease Integer,"
					+ "PRIMARY KEY(id))";
			//This is the query for creating a table
			
			st.executeUpdate(query); //This will execute the query 2
			System.out.println("Created Table");
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	
	//This is the method, that will delete the table is exists.
	public void deleteTable(String tableName) {
		try(Statement st = co.createStatement()){
			String query = "drop table " +tableName;
			st.executeUpdate(query);
			System.out.println("Deleted Table");
		}
		catch(Exception e) {
			System.out.println(e);
		}
	}
	
	
	//This will insert a data into the table
	public void createMovie(final Movie movie, String tableName) {
		String query = "insert into " +tableName+ " values( ?, ?, ?, ?)";
		try(PreparedStatement ps = co.prepareStatement(query)){
			ps.setInt(1, movie.id);
			ps.setString(2, movie.title);
			ps.setString(3, movie.genre);
			ps.setInt(4, movie.yearOfRelease);
			ps.executeUpdate();
			System.out.println("Data inserted");
		}
		catch(Exception e) {
			System.out.println(e);
		}
	}
	
	public int lastId(String tableName) {
		try(Statement s = co.createStatement()){
			String query = "Select id from " +tableName+ " order by id DESC limit 1;";
			ResultSet result = s.executeQuery(query);
			result.next();
			return result.getInt(1);
//			return 4;
		}
		catch(Exception e) {
			System.out.println(e);
		}
		return 0;
		
		
	}


	@Override
	public void deleteMovie(int id, String tableName) {
		// TODO Auto-generated method stub
		String query = "delete from " +tableName+ " where id=" +id;
		try(PreparedStatement s = co.prepareStatement(query)){
			s.executeUpdate();
			System.out.println("Table updated");
		}
		catch(Exception e) {
			System.out.println(e);
		}
		
	}


	@Override
	public void updateMoviesTitle(int id, String newTitle, String tableName) {
		// TODO Auto-generated method stub
		String query = "Update " +tableName+ " SET title='" +newTitle+ "' where id=" +id+ "";
		try(PreparedStatement ps = co.prepareStatement(query)){
			ps.executeUpdate();
			System.out.println("Table updated");
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
	}


	@Override
	public List<Movie> findAll(String tableName) {
		// TODO Auto-generated method stub
		try(Statement st = co.createStatement()){
			String query = "Select * from "+tableName;
			ResultSet rs = st.executeQuery(query);
			List<Movie> moviesList = new ArrayList<>();
			while(rs.next()) {
				int id = rs.getInt(1);
				String title = rs.getString(2);
				String genre = rs.getString(3);
				int year = rs.getInt(4);
				moviesList.add(new Movie(id, title, genre, year));
			}
			return moviesList;
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;
	}
	
	
	public Optional<Movie> findMovieById(final int id, String tableName) {
		String query = "Select * from "+tableName+" where id = ? ";
	    try(PreparedStatement ps = co.prepareStatement(query)){
	    	ps.setInt(1, id);
	    	if(ps.execute()) {
	    		ResultSet rs = ps.executeQuery();
	    		if(rs.next()) {
	    			String title = rs.getString(2);
	    			String genre = rs.getString(3);
	    			int year = rs.getInt(4);
//	    			System.out.println(id+ " " +title);
	    			return Optional.of(new Movie(id, title, genre, year));
	    		}
	    	}
	    	return Optional.empty();
	    }
	    catch(Exception e) {
	    	System.out.println(e);
	    }
		return null;
	    
	
	}
	
}





//This is the class, that contains id, title, genre and yearOfRelease of movie
class Movie{
	
	int id;
	String title;
	String genre;
	int yearOfRelease;
	
	//This is a parameterized constructor, it will collect required data during object creation and stores the data.
	public Movie(int id, String title, String genre, int yearOfRelease) {
		this.id = id;
		this.title = title;
		this.genre = genre;
		this.yearOfRelease = yearOfRelease;
	}
	
	
}





//This is the class, which contains the main method. So the execution will starts here.
public class MoviesDataJDBC {
	
	static String url = "jdbc:mysql://localhost:3306/Movies"; // URL of DB
	static String un = "root"; // user name of the database server
	static String pass = "Purna3689"; // Password of server
	
	
	public static void main(String[] args) {
		
		String tableName = null;
		Scanner sc = new Scanner(System.in);
		
		try(Connection con = DriverManager.getConnection(url, un, pass)){
			//Here we using try-with-resource which will close the Connection resource after the cursor reaches out of the try block.
			
			MovieDAOImple md = new MovieDAOImple(con); 
			System.out.print("Enter the Table name : ");
			tableName = sc.nextLine();
			
			System.out.println("Enter 0 to exit \n"
					+ "1 to create a table \n"
					+ "2 to delete a table \n"
					+ "3 to add record to the table \n"
					+ "4 to delete the record from table \n"
					+ "5 to change the title \n"
					+ "6 to print all the records of the table \n"
					+ "7 to search for the record in the table");
			
			int switchNum = sc.nextInt();
			while(switchNum != 0) {
				switch(switchNum) {
				case 1 : 	md.createTable(tableName); //This method will create a table if not exist.
							break;
							
				case 2 :	md.deleteTable(tableName);  //This method will delete a table if  exist.
							break;
							
				case 3 : 	System.out.print("Enter the movie name, genre, yearOfRelease : ");
							String movieName = sc.next();
							String genre = sc.next();
							int yearOfRelease = sc.nextInt();
							md.createMovie(new Movie((md.lastId(tableName))+1, movieName, genre, yearOfRelease), tableName); //this will insert the data into the table.
							break;
							
				case 4 :	System.out.print("Enter id of a movie, which you wanted to delete: ");
							int id = sc.nextInt();
							md.deleteMovie(id, tableName);
							break;
				
				case 5 : 	System.out.println("Enter the id and new Title Name : ");
							id = sc.nextInt();
							String newTitle = sc.next();
							md.updateMoviesTitle(id, newTitle, tableName);
							break;
							
				case 6 : 	List<Movie> mv = md.findAll(tableName);
							int i = 0;
							while(i < mv.size()) {
								System.out.println("id: " +mv.get(i).id+ " || Title: " +mv.get(i).title+ " || Genre: " +mv.get(i).genre+ " || year of release: " +mv.get(i).yearOfRelease);
								i++;
							}
							break;
							
				case 7 : 	System.out.println("Enter the id of the movie you want : ");
							id = sc.nextInt();
							System.out.println(md.findMovieById(id, tableName).get().title);
			
				}
				switchNum = sc.nextInt();
			}
			System.out.println("-----Thank You-----");
			
		}
		catch(Exception e) {
			
			System.out.println(e);
		}
		finally {
			sc.close();
		}
	}

}

